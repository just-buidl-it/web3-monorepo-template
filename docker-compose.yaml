version: '3'
services:
  graph-node:
    image: graphprotocol/graph-node:v0.29.0
    profiles: ["subgraph", "app"]
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      ipfs:
        condition: service_started
      postgres:
        condition: service_started
      protocol:
        condition: service_healthy
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      # Change next line if you want to connect to a different JSON-RPC endpoint
      ethereum: 'hardhat:http://host.docker.internal:8545'
      GRAPH_LOG: info
  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    profiles: ["subgraph", "app"]
    ports:
      - '5001:5001'
    volumes:
      - ./data/ipfs:/data/ipfs
  postgres:
    image: postgres
    profiles: ["subgraph", "app"]
    ports:
      - '5432:5432'
    command:
      [
        "postgres",
        "-cshared_preload_libraries=pg_stat_statements"
      ]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
  protocol:
    build:
      context: protocol
      dockerfile: Dockerfile
    profiles: ["subgraph", "protocol", "app"]
    environment:
      YARN_VERSION: 3.2.2
    command:
      - sh
      - -c
      - |
        yarn hardhat node
    ports:
      - 8545:8545
    volumes:
      - ./protocol:/usr/app
      - /usr/app/node_modules
    restart: always
    healthcheck:
      test: [ "CMD", "node", "./hardhat-healthcheck.js" ]
      interval: 30s
      timeout: 12s
      retries: 10
  interface:
    build:
      context: interface
      dockerfile: Dockerfile
    profiles: ["interface", "app"]
    command:
      - sh
      - -c
      - |
        yarn
        yarn start
    ports:
      - 3000:3000
    volumes:
      - ./interface:/usr/app
      # Mounting as a dependency for local development and then linking it with yarn in the command
      - ./protocol:/usr/app
      - /usr/app/node_modules
    restart: always
    env_file: interface/.env
  server:
    build:
      context: server
      dockerfile: Dockerfile
    profiles: ["server", "app"]
    ports:
      - 8080:8080
    volumes:
      - ./server:/usr/app
    restart: always
